#
# Things to figure out:
# 

import sys
import os
import csv 
from PyQt5.QtWidgets import (QWidget, QToolTip,
                             QPushButton, QApplication, QMessageBox, QDesktopWidget,
                             QStyleFactory, QMainWindow, qApp, QFileDialog, QTableWidgetItem, 
                             QAbstractItemView, QMenu, QAction)
from PyQt5.QtGui import QFont, QPalette, QColor, QIcon
from PyQt5.QtCore import QFile, QObject, Qt, QTextStream, QDir
from Ui_MainWindow import *

class MainWindow(QMainWindow):
    numRows = 0
    isDirty = False
    homePath = QDir.homePath()

    def __init__(self, parent=None):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.statusBar()
        self.ui.actionExit.triggered.connect(qApp.quit)
        self.ui.actionAdd_File.triggered.connect(self.addFile)
        self.ui.actionExport.triggered.connect(self.exportFile)
        self.ui.actionClearTable.triggered.connect(self.clearTable)
        
        self.setupTable()
        #self.ui.tableFiles.setSelectionMode(QAbstractItemView.MultiSelection)
        self.ui.tableFiles.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.ui.tableFiles.customContextMenuRequested.connect(
            self.onContextMenu)

        self.menu = QMenu(self)
        act = QAction("Delete row...", self)
        act.triggered.connect(self.onDeleteRow)
        self.menu.addAction(act)
        
        self.ui.tableFiles.viewport().installEventFilter(self)
        self.setWindowIcon(QIcon('icon.png'))
        self.center()
    # end __init__

    def eventFilter(self, source, event):
        if(event.type() == QtCore.QEvent.MouseButtonPress and
           event.buttons() == QtCore.Qt.RightButton and
           source is self.ui.tableFiles.viewport()):
            item = self.ui.tableFiles.itemAt(event.pos())
            #print('Global Pos:', event.globalPos())
            if item is not None:
                #print('Table Item:', item.row(), item.column())
                theItem = self.ui.tableFiles.item(item.row(), item.column())
                
        return super(MainWindow, self).eventFilter(source, event)
    # end eventFilter

    def onContextMenu(self, pos):
        if self.ui.tableFiles.selectionModel().hasSelection():
            self.menu.exec_(self.ui.tableFiles.mapToGlobal(pos))   # +++
    # end onContextMenu

    def onDeleteRow(self, pos):
        indexes = self.ui.tableFiles.selectionModel().selectedRows()
        for index in sorted(indexes):
            self.ui.tableFiles.removeRow(index.row())
        self.numRows = self.ui.tableFiles.rowCount()
        if self.numRows == 0:
            self.ui.actionExport.setDisabled(True)
    # end onDeleteRow

    def validInput(self):
        arrayList = list()

        for i in range(self.numRows):
            objName = self.ui.tableFiles.item(i, 1).text().strip()
            arrayList.append(objName)

            if len(objName) == 0:
                return False, "Missing array name"
        
        # Check for duplicate array names
        listSet = set()
        for elt in arrayList:
            if elt in listSet:
                return False, "Arrays cannot have the same name"
            else:
                listSet.add(elt)
        
        return True, ""
    # end validInput

    def exportFile(self):

        valid, errMsg = self.validInput()
        if not valid:
            dlg = QMessageBox(self)
            dlg.setStandardButtons(QMessageBox.Ok)
            dlg.setWindowTitle("Error")
            dlg.setIcon(QMessageBox.Critical)
            dlg.setText(errMsg)
            dlg.setWindowIcon(QIcon('icon.png'))
            dlg.exec_()
            return 

        fname, ok = QFileDialog.getSaveFileName(
            self, 'Export To...', self.homePath, "C Header File (*.h);;C Source File (*.c)"
        )

        if ok:            
            selFilter = ok

            if os.path.exists(fname):
                os.unlink(fname)

            outFile = open(fname, 'w')
            outFile.write("/* Generated by Tiled2NES */\n\n")

            if self.ui.checkCodeGuards.isChecked():
                guardName = os.path.basename(fname).upper()
                guardName = guardName.replace('.', '_')

                outFile.write("#ifndef %s\n#define %s\n\n" %
                            (guardName, guardName))

            for i in range(self.numRows):
                # Get item in table
                inputFilename = self.ui.tableFiles.item(i, 4).text()
                objName = self.ui.tableFiles.item(i, 1).text().strip()

                with open(inputFilename, 'r') as infile:
                    reader = csv.reader(infile)
                    lines = list(reader)

                outFile.write("const unsigned char " + objName + "[]={\n")

                rows = len(lines)
                cols = len(lines[0])

                for i in range(rows):
                    for j in range(cols):
                        outFile.write("\t%s," % lines[i][j])
                    outFile.write("\n")

                # delete that last comma, back it up
                z = outFile.tell()
                z = z - 3
                outFile.seek(z)
                outFile.write("\n};\n\n")


            if self.ui.checkCodeGuards.isChecked():
                outFile.write("\n\n#endif\n")
            outFile.close()
    # end exportFile

    def clearTable(self):
        self.setupTable()
    # end clearTable

    def setupTable(self):
        self.numRows = 0
        self.ui.tableFiles.clear()
        self.ui.tableFiles.setRowCount(0)
        self.ui.tableFiles.setColumnCount(5)

        self.ui.tableFiles.setHorizontalHeaderLabels(["File","Array Name", "Rows", "Cols", "Path"])

        for i in range(self.ui.tableFiles.columnCount()):
            self.ui.tableFiles.horizontalHeaderItem(i).setTextAlignment(Qt.AlignHCenter)

        self.ui.tableFiles.setColumnHidden(4, True)
        self.ui.tableFiles.setColumnWidth(0, 200)
        self.ui.tableFiles.setColumnWidth(1, 200)
        self.ui.tableFiles.setColumnWidth(2, 50)
        self.ui.tableFiles.setColumnWidth(3, 50)

        self.ui.actionExport.setDisabled(True)
        self.isDirty = False
    # end setupTable

    def addFile(self):

        fnames, ok = QFileDialog.getOpenFileNames(
            self, 'Add Tiled Map(s)', self.homePath, "Tiled CSV (*.csv)")

        if ok:
            self.loadingData = True
            for i in range(len(fnames)):
                fname = fnames[i]
                shortName = os.path.basename(fname)
            
                self.ui.tableFiles.setRowCount(self.numRows+1)
            
                objName = shortName[0:-4]
                cell = QTableWidgetItem(shortName)
                cell.setFlags(QtCore.Qt.ItemIsEnabled)
                
                self.ui.tableFiles.setItem( self.numRows, 0, cell )
                self.ui.tableFiles.setItem( self.numRows, 1, QTableWidgetItem(objName) )
                self.ui.tableFiles.setItem( self.numRows, 4, QTableWidgetItem(fname))

                # Get the dimensions
                with open(fname, 'r') as csvfile:
                    reader = csv.reader(csvfile)
                    csvlist = list(reader)
                
                rows = len(csvlist)
                cols = len(csvlist[0])

                cell = QTableWidgetItem("%d" % rows)
                cell.setFlags(QtCore.Qt.ItemIsEnabled)

                self.ui.tableFiles.setItem(self.numRows, 2, cell)

                cell = QTableWidgetItem("%d" % cols)
                cell.setFlags(QtCore.Qt.ItemIsEnabled)

                self.ui.tableFiles.setItem(self.numRows, 3, cell)
                #self.importFiles.append( [fname, shortName, objName, rows, cols] )
                self.numRows += 1
            self.ui.actionExport.setDisabled(False)
    # end addFile


    def center(self):
        # geometry of the main window
        qr = self.frameGeometry()

        # center point of screen
        cp = QDesktopWidget().availableGeometry().center()

        # move rectangle's center point to screen's center point
        qr.moveCenter(cp)

        # top left of rectangle becomes top left of window centering it
        self.move(qr.topLeft())
    # end center
# end class

if __name__ == '__main__':
    app = QApplication(sys.argv)
    os.chdir(os.path.dirname(__file__))
    app.setStyle(QStyleFactory.create("Fusion"))
    app.setOrganizationName("dmwatson")

    win = MainWindow()
    translator = QObject()
    win.setWindowTitle(translator.tr("Tiled2NES"))
    # win.setWindowIcon()
    win.show()
    sys.exit(app.exec_())
